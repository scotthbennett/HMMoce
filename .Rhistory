data <- data[1:5,]
data
days
data1 <- data.frame(data %>% arrange(date) %>%
group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days)))
data1
data %>% arrange(date) %>%
group_by(id) %>%
mutate(diff = c(0,diff(date))
,
periodID = 1 + cumsum(diff > days))
data
diff(data$date)
data1 <- data.frame(data %>% arrange(date) %>%
group_by(id) %>%
mutate(diff = c(0,diff(date))))
data1
data1 <- data.frame(data %>% arrange(date) %>%
group_by(id) %>%
mutate(diff = diff(date)))
data1
data1 <- data.frame(data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = diff(date)))
data$diff <- diff(data$date)
data
data1 <- data.frame(data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date))))
data1
data1 <- data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days))
data1 <- data.frame(data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days)))
data1
data1$diff > days
runchecker <- function(data, days){
data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days)) %>%
group_by(id) %>%
summarise(days = last(date) - first(date))
}
str(data)
str(pdt)
pdt$id <- seq(1, nrow(pdt), by=1)
runchecker <- function(data, days){
data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days)) %>%
group_by(id) %>%
summarise(days = last(date) - first(date))
}
pdt1 <- runchecker(pdt, 1)
t1
str(pdt1)
pdt1 <- data.frame(runchecker(pdt, 1))
str(pdt1)
head(pdt1)
str(pdt)
pdt.u <- pdt[which(!duplicated(pdt$date)),]
head(pdt.u)
pdt.u$id <- seq(1, nrow(pdt.u), by=1)
head(pdt.u)
pdt1 <- runchecker(pdt.u, 1)
head(pdt1)
runchecker <- function(data, days){
data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days))# %>%
#group_by(id) %>%
#summarise(days = last(date) - first(date))
}
pdt1 <- runchecker(pdt.u, 1)
head(pdt1)
pdt1[1:20,]
runchecker <- function(data, days){
data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days))# %>%
group_by(periodID) %>%
summarise(days = last(date) - first(date))
}
pdt1 <- runchecker(pdt.u, 1)
runchecker <- function(data, days){
data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days)) %>%
group_by(periodID) %>%
summarise(days = last(date) - first(date))
}
pdt1 <- runchecker(pdt.u, 1)
head(pdt1)
pdt1 <- data.frame(runchecker(pdt.u, 1))
pdt1
tail(pdt.u)
pdt1 <- data.frame(runchecker(pdt.u, 0))
pdt1
pdt1 <- data.frame(runchecker(pdt.u, 1))
pdt1
pdt.u[150:189,]
data <- pdt.u
days=1
data.frame(data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days)))
head(pdt1)
data.frame(data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days)) %>%
group_by(periodID))
tail(data.frame(data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days)) %>%
group_by(periodID)))
summary(data.frame(data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)),
periodID = 1 + cumsum(diff > days)) %>%
group_by(periodID)))
runchecker <- function(data, days){
data %>% arrange(date) %>%
#group_by(id) %>%
mutate(diff = c(0,diff(date)))}#,
pdt1 <- data.frame(runchecker(pdt.u, 1))
pdt1
head(diff(pdt$date))
head(pdt)
head(diff(pdt.u$date))
# build HMMoce
str(pdt)
str(pdt.udates)
diff(pdt.udates)
tail(pdt.udates)
tag
pop
diff(c(as.Date(tag), pdt.udates, as.Date(pop)))
diff(c(as.Date(tag), pdt.udates, as.Date(pop))) != 1
diff(c(as.Date(tag), pdt.udates, as.Date(pop)))
data <- utils::read.table(paste(wd, ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
d1 <- as.POSIXct('1900-01-02') - as.POSIXct('1900-01-01')
tag + d1
tag
dateVec
head(dateVec)
head(pdt.udates)
head(dateVec[!(dateVec %in% pdt.udates)])
tail(dateVec[!(dateVec %in% pdt.udates)])
myDir
ptt
locs <- read.table(paste(myDir, ptt, '-Locations-GPE2.csv', sep = ''), sep = ',', header = T, blank.lines.skip = F)
locDates <- as.Date(as.POSIXct(locs$Date, format=HMMoce:::findDateFormat(locs$Date)))
gaps <- diff(c(as.Date(dateVec[1]), unique(locDates), as.Date(dateVec[length(dateVec)])))
gaps
c(as.Date(dateVec[1]), unique(locDates), as.Date(dateVec[length(dateVec)]))
tail(locDates)
tail(locs)
loc.idx <- which(locs$Type == 'GPE')
locs <- locs[loc.idx,]
locDates <- locDates[loc.idx]
gaps <- diff(c(as.Date(dateVec[1]), unique(locDates), as.Date(dateVec[length(dateVec)])))
gaps
gaps <- diff(c(as.Date(dateVec[1]), unique(locDates), as.Date(dateVec[length(dateVec)])), units='days')
print(paste('Data gaps are ', paste(gaps, collapse=', '), ' days...'))
seq(tag, pop, 'day')
as.Date(seq(tag, pop, 'day'))
as.Date(seq(tag, pop-1, 'day'))
as.Date(seq(tag, pop, 'day'))
as.Date(seq(tag+1, pop-1, 'day'))
length(seq(tag, pop, 'day'))
print(paste(length(which(as.Date(seq(tag, pop, 'day')) %in% pdt.udates)), ' of ', length(seq(tag, pop, 'day')), ' deployment days have GPE data...', sep=''))
as.Date(seq(tag, pop, 'day')) %in% pdt.udates
gaps <- diff(c(as.Date(tag), pdt.udates, as.Date(pop)), units='days')
print(paste('Data gaps are ', paste(gaps, collapse=', '), ' days...'))
print(paste('Data gaps are ', paste(gaps[gaps > 1], collapse=', '), ' days...'))
iniloc
tr
list.files()
tr <- data.frame(cbind(date=dateVec, lon=rep(-50, length.out=length(dateVec)), lat=rep(40, length.out=length(dateVec))))
str(tr)
iniloc
iniloc$lon[1] - 1 < round(tr$lon[1],0) < iniloc$lon[1] + 1
iniloc$lon[1] - 1 < round(tr$lon[1],0) & iniloc$lon[1] + 1 > round(tr$lon[1],0)
iniloc$lon[1] - 1 < round(tr$lon[1],0) & iniloc$lon[1] + 1 > round(tr$lon[1],0)
iniloc$lat[1] - 1 < round(tr$lat[1],0) & iniloc$lat[1] + 1 > round(tr$lat[1],0)
iniloc$lon[2] - 1 < round(tr$lon[nrow(tr)],0) & iniloc$lon[2] + 1 > round(tr$lon[nrow(tr)],0)
iniloc$lat[2] - 1 < round(tr$lat[nrow(tr),0) & iniloc$lat[2] + 1 > round(tr$lat[nrow(tr)],0)
return(track)
}
iniloc$lat[2] - 1 < round(tr$lat[nrow(tr)],0) & iniloc$lat[2] + 1 > round(tr$lat[nrow(tr)],0)
tr$lon[1]
iniloc
tr$lon[1]<- -69
head(tr)
iniloc$lon[1] - 1 < round(tr$lon[1],0) & iniloc$lon[1] + 1 > round(tr$lon[1],0)
iniloc$lat[1] - 1 < round(tr$lat[1],0) & iniloc$lat[1] + 1 > round(tr$lat[1],0)
iniloc$lon[2] - 1 < round(tr$lon[nrow(tr)],0) & iniloc$lon[2] + 1 > round(tr$lon[nrow(tr)],0)
iniloc$lat[2] - 1 < round(tr$lat[nrow(tr)],0) & iniloc$lat[2] + 1 > round(tr$lat[nrow(tr)],0)
c(iniloc$lon[1] - 1 < round(tr$lon[1],0) & iniloc$lon[1] + 1 > round(tr$lon[1],0),
iniloc$lat[1] - 1 < round(tr$lat[1],0) & iniloc$lat[1] + 1 > round(tr$lat[1],0),
iniloc$lon[2] - 1 < round(tr$lon[nrow(tr)],0) & iniloc$lon[2] + 1 > round(tr$lon[nrow(tr)],0),
iniloc$lat[2] - 1 < round(tr$lat[nrow(tr)],0) & iniloc$lat[2] + 1 > round(tr$lat[nrow(tr)],0))
any(c(iniloc$lon[1] - 1 < round(tr$lon[1],0) & iniloc$lon[1] + 1 > round(tr$lon[1],0),
iniloc$lat[1] - 1 < round(tr$lat[1],0) & iniloc$lat[1] + 1 > round(tr$lat[1],0),
iniloc$lon[2] - 1 < round(tr$lon[nrow(tr)],0) & iniloc$lon[2] + 1 > round(tr$lon[nrow(tr)],0),
iniloc$lat[2] - 1 < round(tr$lat[nrow(tr)],0) & iniloc$lat[2] + 1 > round(tr$lat[nrow(tr)],0)))
!any(c(iniloc$lon[1] - 1 < round(tr$lon[1],0) & iniloc$lon[1] + 1 > round(tr$lon[1],0),
iniloc$lat[1] - 1 < round(tr$lat[1],0) & iniloc$lat[1] + 1 > round(tr$lat[1],0),
iniloc$lon[2] - 1 < round(tr$lon[nrow(tr)],0) & iniloc$lon[2] + 1 > round(tr$lon[nrow(tr)],0),
iniloc$lat[2] - 1 < round(tr$lat[nrow(tr)],0) & iniloc$lat[2] + 1 > round(tr$lat[nrow(tr)],0)))
!c(iniloc$lon[1] - 1 < round(tr$lon[1],0) & iniloc$lon[1] + 1 > round(tr$lon[1],0),
iniloc$lat[1] - 1 < round(tr$lat[1],0) & iniloc$lat[1] + 1 > round(tr$lat[1],0),
iniloc$lon[2] - 1 < round(tr$lon[nrow(tr)],0) & iniloc$lon[2] + 1 > round(tr$lon[nrow(tr)],0),
iniloc$lat[2] - 1 < round(tr$lat[nrow(tr)],0) & iniloc$lat[2] + 1 > round(tr$lat[nrow(tr)],0))
warning('Known tag and pop-up locations are not within +/- 1deg of final calculated start/stop positions of the track. This usually means the input likelihoods were too far from the known locations for the filter/smoother process to realistically get the tag to the known location given the movement kernels specified.')
parallel::detectCores
system
?system
ncores=NULL
if (is.null(ncores)) ncores <- ceiling(parallel::detectCores() * .9)
if (is.na(ncores) | ncores < 0) ncores <- ceiling(as.numeric(system('nproc', intern=T)) * .9)
ncores
parallel::detectCores()
system('nproc', intern=T)
str(pdt)
load('~/Documents/WHOI/RData/pdtMatch/WOA_25deg/global/woa.quarter.rda')
sp.lim
sp.lim <- list(lonmin = bask.lims$small.bnds[1],
lonmax = bask.lims$small.bnds[2],
latmin = bask.lims$small.bnds[3],
latmax = bask.lims$small.bnds[4])
setwd('~/Documents/WHOI/RCode/HMMoce')
devtools::check(vignettes=F)
?rgeos
library(rgeos)
?rgeos
?rgeos-package
?'rgeos-package'
??rgeos
?contourLines
?RColorBrewer
?colorRampPalette
?findInterval
title
devtools::check(vignettes=F)
devtools::check(vignettes=F)
devtools::check(vignettes=F)
devtools::build(vignettes=F)
install.packages("~/Documents/WHOI/RCode/HMMoce_0.2.0.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(HMMoce)
load('~/Downloads/check2.rda')
str(tag.sst)
gc()
load('~/Downloads/check2.rda')
calc.sst.par
7.92e7
7.92e7/8
7.92e7/8*6
6*7.92e7/8
devtools::check(vignettes=F)
devtools::build(vignettes=F)
install.packages('BAStag')
library(BAStag)
devtools::install_github("SWotherspoon/BAStag")
library(BAStag)
?`BAStag-package`
myDir <- '~/Documents/WHOI/Data/BlueSharks/2015/141256'
ptt=141256
tag <- as.POSIXct('2015-10-13',format='%Y-%m-%d' tz='UTC')
tag <- as.POSIXct('2015-10-13',format='%Y-%m-%d', tz='UTC')
pop <- as.POSIXct('2016-02-24',format='%Y-%m-%d', tz='UTC')
light <- read.wc(ptt, wd = myDir, type = 'light', tag=tag, pop=pop);
light <- read.table()
list.files()
list.files(myDir)
wd=myDir
data <- utils::read.table(paste(wd,'/', ptt, '-LightLoc.csv', sep=''), sep=',',header=T, blank.lines.skip=F,skip=2)
str(data)
if(!any(grep('depth', names(data), ignore.case=T))) data <- utils::read.table(paste(wd,'/', ptt, '-LightLoc.csv', sep=''), sep=',',header=T, blank.lines.skip=F,skip=1)
if(!any(grep('depth', names(data), ignore.case=T))) data <- utils::read.table(paste(wd,'/', ptt, '-LightLoc.csv', sep=''), sep=',',header=T, blank.lines.skip=F,skip=0)
data <- data[which(!is.na(data[,1])),]
str(data)
dts <- as.POSIXct(data$Day, format = findDateFormat(data$Day), tz = 'UTC')
str(dts)
d1 <- as.POSIXct('1900-01-02') - as.POSIXct('1900-01-01')
didx <- (dts > (tag + d1)) & (dts < (pop - d1))
data <- data[didx,]
data$dts <- as.Date(dts[didx])
udates <- unique(as.Date(dts))
light <- data
str(light)
head(light)
library(reshape2)
str(melt(light))
?melt
str(melt(light, id=c('Day', 'LL1')))
?group_by
data.frame(group_by(light, Day, LL1, LL2))
vars <- grep('LL', light)
vars
vars <- grep('LL', names(light))
vars
vars <- names(light[,grep('LL', names(light))])
vars
str(reshape(light, ids=light$Day, direction='long', varying=vars, times=vars, sep='', timevar='LL'))
?reshape
str(reshape(light, ids=Day, direction='long', varying=vars, sep=''))
str(reshape(light, ids=light$Day, direction='long', varying=vars, sep=''))
unique(light$Day)
light$Day <- as.Date(light$Day, format=findDateFormat(light$Day))
light <- light[which(!duplicated(light$Day)),]
str(light)
str(reshape(light, ids=light$Day, direction='long', varying=vars, sep=''))
light2 <- reshape(light, ids=light$Day, direction='long', varying=vars, sep='')
str(light2)
light2$id
str(light2)
str(light)
head(light2)
unique(light2$time)
light2 <- cbind(light2$time, light2$LL, light2$id)
str(light2)
light2 <- as.data.frame(light2)
str(light2)
light2 <- reshape(light, ids=light$Day, direction='long', varying=vars, sep='')
str(light2)
light2 <- light2[,41:43]
str(light2)
light2 <- light2[order(light2$id, light2$time),]
str(light2)
?lightImage
light2$dts <- as.POSIXct(light2$id, tz='UTC')
str(light2)
names(light2) <- c('LLbin','Light','id','Date')
lightImage(light2)
plot(light2$Light, light2$Date)
ptt=141256
wd <- '~/Documents/WHOI/RCode/HMMoce_run_data/data/141256/'
tag <- as.Date('2015-10-13')
pop <- as.Date('2016-02-24')
data <- utils::read.table(paste(wd, ptt,'-PDTs.csv', sep=''), sep=',',header=T,blank.lines.skip=F, skip = 0)
data <- extract.pdt(data)
source('~/Documents/WHOI/RCode/HMMoce/R/extract.pdt.r')
data <- extract.pdt(data)
library(HMMoce)
data <- extract.pdt(data)
dts <- as.POSIXct(data$Date, format = findDateFormat(data$Date))
d1 <- as.POSIXct('1900-01-02') - as.POSIXct('1900-01-01')
didx <- dts >= (tag + d1) & dts <= (pop - d1)
tag <- as.POSIXct(tag)
pop <- as.POSIXct(pop)
dts <- as.POSIXct(data$Date, format = findDateFormat(data$Date))
d1 <- as.POSIXct('1900-01-02') - as.POSIXct('1900-01-01')
didx <- dts >= (tag + d1) & dts <= (pop - d1)
str(didx)
data <- data[didx,]; dts <- dts[didx]
str(data)
data1 <- data
data1$dts <- as.Date(dts)
dt.cut <- data.frame(group_by(data1, dts) %>% summarise(n=n()))
library(dplyr)
dt.cut <- data.frame(group_by(data1, dts) %>% summarise(n=n()))
str(dt.cut)
dt.cut
dt.cut <- dt.cut[which(dt.cut[,2] < 3),1]
dt.cut
length(dt.cut) == 0
str(data)
udates <- unique(as.Date(data$Date))
print(paste(length(which(as.Date(seq(tag, pop, 'day')) %in% udates)), ' of ', length(seq(tag, pop, 'day')), ' deployment days have PDT data...', sep=''))
gaps <- diff(c(as.Date(tag), udates, as.Date(pop)), units='days')
print(paste('Data gaps are ', paste(gaps[gaps > 1], collapse=', '), ' days in PDT...'))
devtools::build(vignettes=F)
install.packages("~/Documents/WHOI/RCode/HMMoce_0.2.0.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::build(vignettes=F)
install.packages("~/Documents/WHOI/RCode/HMMoce_0.2.0.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
devtools::build(vignettes=F)
install.packages("~/Documents/WHOI/RCode/HMMoce_0.2.0.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
load('~/Documents/WHOI/RData/WhiteSharks/whitesharkms_7Aug2017.rda')
load('~/Documents/WHOI/RData/WhiteSharks/whitesharkms_7Aug2017.RData')
str(allData.save)
plot(allData.save$lon, allData.save$lat)
world(add=T)
library(fields)
world(add=T)
whites <- allData.save
save(whites, file='~/Downloads/all_white_tracks.rda')
devtools::check(vignettes=F)
?check
?build
devtools::check(vignettes=F)
devtools::check(vignettes=F)
devtools::check(vignettes=FALSE)
devtools::check(vignettes=FALSE)
devtools::build(vignettes=F)
install.packages("~/Documents/WHOI/RCode/HMMoce_0.2.0.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
vignette('HMMoce')
library(curl)
?curl_download
devtools::check(vignettes=F)
devtools::check(vignettes=F)
?get.env
?get.env
devtools::check(vignettes=F)
vignette(dplyr)
vignette('dplyr')
library(dplyr)
vignette(dplyr)
vignette('dplyr')
browseVignettes('dplyr')
vignettes('dplyr')
?vignette
vignette(package='dplyr')
vignette(package='HMMoce')
devtools::check()
devtools::check()
devtools::build()
devtools::use_travis()
install.packages("~/Documents/WHOI/RCode/HMMoce_0.2.0.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
vignette('HMMoce')
vignette(package='HMMoce')
browseVignettes(package='HMMoce')
browseVignettes()
devtools::install()
install.packages('tibble')
install.packages("tibble")
devtools::install()
browseVignettes()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
browseVignettes()
vignette(package='HMMoce')
vignette('HMMoce')
vignette('Using_HMMoce')
?install_github
library(png)
library(grid)
img <- readPNG("dashboard.png")
grid.raster(img)
?build_win
devtools::build_win()
R.Version()
devtools::use_build_ignore("NEWS.md")
devtools::build_win(version=c('R-devel'))
devtools::build(vignettes =T)
devtools::check()
?png
devtools::check()
devtools::check()
devtools::check()
?build_win
devtools::build_win(version=c('R-devel'))
devtools::build()
?release
?install_github
devtools::release()
install.packages('devtools')
install.packages("devtools")
devtools::release()
devtools::release()
devtools::check()
devtools::release()
devtools::release()
devtools::release()
install.packages('curl')
install.packages("curl")
install.packages('httr')
?build_win
devtools::build_win(version = c('R-devel'))
devtools::build_win(version = c('R-devel'))
devtools::build_win(version = c('R-devel'))
devtools::build_win(version = c('R-devel'))
devtools::check()
devtools::check()
?calc.errEll
?calc.gpe2
?calc.hycom.par
?calc.hycom
?calc.locs
?calc.ohc.par
?calc.param
devtools::check()
?calc.param
?calc.srss
?calc.sst.par
?get.bath.data
devtools::check()
devtools::check()
?get.env
devtools::check()
devtools::check()
devtools::check()
devtools::build()
devtools::build_win(version=c('R-release'))
devtools::build_win(version=c('R-devel'))
devtools::build_win(version=c('R-devel'))
?release
devtools::release()
